# Cheatsheet for Interview Problems 

## C++ Notes

### Array and Strings 

- set: binary search tree
- unordered_set: hashset

#### iterating through map
```
for (auto x: mp){
    ans.push_back(x.second); // x.first is the key
}
```

```
double numbers[size] {0};
int i2[row][column]

// arrays2.cpp
// compile with: /c
const int cMarkets = 4;
// Declare a float that represents the transportation costs.
double TransportCosts[][cMarkets] = {
   { 32.19, 47.29, 31.99, 19.11 },
   { 11.29, 22.49, 33.47, 17.29 },
   { 41.97, 22.09,  9.76, 22.55 }
};

```

#### initialize array with all zeros
```
int sCharCount[26] = { 0 };
```

#### string iterator
```
string iterator
---

// string::begin/end
#include <iostream>
#include <string>

int main ()
{
  std::string str ("Test string");
  for ( std::string::iterator it=str.begin(); it!=str.end(); ++it)
    std::cout << *it;
  std::cout << '\n';

  return 0;
}
```

#### ascii
```
65 - 90 A-Z
97 - 122 a-z
```

#### print array template
```
// Print in Normal order
std::copy(userInput.begin(),
          userInput.end(),
          std::ostream_iterator<int>(std::cout,",")
         );
std::cout << "\n";

template<typename T, size_t n>
void print_array(T const(& arr)[n])
{
    for (size_t i = 0; i < n; i++) {
        std::cout << arr[i] << ' ';
    }
}
```

#### convert char to int using ascii code
```
// Count the frequency of characters in string s
for (char x : s) {
    count[x - 'a']++;
}

// Decrement the frequency of characters in string t
for (char x : t) {
    count[x - 'a']--;
}
```

#### find target with complement
```
// calculate the complement and check hashmap if it exists
// if not then store the current number to the map 
for (int i = 0;i < n; i++){
	int complement = target - nums[i];
	if (numMap.count(complement))}{
		return {numMap[complement], i}
	}
	numMap[nums[i]] = i; 
}

unordered_map<int, int> numMap;
numMap.count(complement) // check if it exists
```

#### vector
```
// Create a vector of size n with all values as 10 
vector<int> vect(n, 10);

// 10 20 30
vector<int> vect{ 10, 20, 30 };

int arr[] = {10, 20, 30}
int n = sizeof(arr) / sizeof(arr[0]);

vector<int> vect(arra, arr + n);
```






